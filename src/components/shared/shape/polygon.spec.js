import { describe, expect, test } from 'vitest';
import { getOriginPointsForPolygon } from './polygon';

describe('Polygon points generating', () => {
  const testParamaters = [
    [
      6,
      10,
      0,
      /* [
        [0, -10],
        [8.66025403784439, -5],
        [8.66025403784439, 5],
        [1.22464679914735e-15, 10],
        [-8.66025403784438, 5],
        [-8.66025403784439, -4.99999999999999],
      ], */
      [
        [0, -10],
        [8.6603, -5],
        [8.6603, 5],
        [0, 10],
        [-8.6603, 5],
        [-8.6603, -5],
      ],
    ],
    [
      5,
      25,
      45,
      /* [
        [17.6776695296637, -17.6776695296637],
        [22.2751631047092, 11.3497624934887],
        [-3.91086162600577, 24.6922085148784],
        [-24.6922085148784, 3.91086162600578],
        [-11.3497624934887, -22.2751631047092],
      ], */
      [
        [17.6777, -17.6777],
        [22.2752, 11.3498],
        [-3.9109, 24.6922],
        [-24.6922, 3.9109],
        [-11.3498, -22.2752],
      ],
    ],
    [
      9,
      56,
      129,
      /* [
        [43.5201738415904, 35.2419418987909],
        [10.6853037410865, 54.9711222730692],
        [-27.1493387337948, 48.9787035998062],
        [-52.2805038838433, 20.0686051745368],
        [-52.9490402335617, -18.2318166496008],
        [-28.842132194963, -48.0013688393183],
        [8.76033004225286, -55.3105470733277],
        [42.2637364924752, -36.7393056234684],
        [55.9914709287579, -0.977334760487932],
      ], */
      [
        [43.5202, 35.2419],
        [10.6853, 54.9711],
        [-27.1493, 48.9787],
        [-52.2805, 20.0686],
        [-52.949, -18.2318],
        [-28.8421, -48.0014],
        [8.7603, -55.3105],
        [42.2637, -36.7393],
        [55.9915, -0.9773],
      ],
    ],
  ];

  test.each(testParamaters)(
    'should generate %i points that touch a circle of radius %i, starting from Y offset by %i degrees',
    (sides, radius, degrees, expected) => {
      const truncated = getOriginPointsForPolygon(sides, radius, degrees).map(
        (point) => point.map((n) => parseFloat(n.toFixed(4))) // Decimal precision is fun
      );

      expect(truncated).toEqual(expected);
    }
  );
});
